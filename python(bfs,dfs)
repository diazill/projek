vertexList = ['1', '2', '3', '4', '5', '6', '7' ,'8','9', '10', '11', '12', '13', '14', '15', '16' ,'17', '18', '19', '20','' ]
edgeList = [(7,18),(18,7),(7,2),(2,7),(2,8),(8,2),(8,16),(16,8),(16,6),(6,16),(6,12),(12,6),(6,5),(5,6),(12,5),(5,12),(5,10),(10,5),(8,3),(3,8),(3,13),(13,3),(3,10),(10,3),(10,1),(1,10),(1,17),(17,1),(1,9),(9,1),(9,19),(19,9),(9,13),(13,9),(9,14),(14,9),(14,4),(4,14),(4,15),(15,4),(15,2),(2,15),(15,11),(11,15),(11,20),(20,11),(20,7),(7,20)]
graphs = vertexList, edgeList
def dfs(graphs, start):
    visitedList = []
    stack = [start]
    adjacencyList = [[] for vertex in vertexList]
    
    for edge in edgeList:
        adjacencyList[edge[0]].append(edge[1])
        
    while stack:
        current = stack.pop()
        for neighbor in adjacencyList[current]:
            if not neighbor in visitedList:
                stack.append(neighbor)
        visitedList.append(current)
    return visitedList
print("DFS: ")
print(dfs(graphs, 7))
print()
def bfs(graphs, start):
    visitedList = []
    queue = [start]
    adjacencyList = [[] for vertex in vertexList]
    
    for edge in edgeList:
        adjacencyList[edge[0]].append(edge[1])
        
    while queue:
        current = queue.pop()
        for neighbor in adjacencyList[current]:
            if not neighbor in visitedList:
                queue.insert(0,neighbor)
        visitedList.append(current)
    return visitedList
print("BFS: ")
print(bfs(graphs, 7))
